:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Random.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Random:

Random
======

**Inherits:** :ref:`RandomNumberGenerator<class_RandomNumberGenerator>` **<** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

An instance of :ref:`RandomNumberGenerator<class_RandomNumberGenerator>` available at :ref:`@GlobalScope<class_@GlobalScope>`.

Description
-----------

This is a singleton which allows to use :ref:`RandomNumberGenerator<class_RandomNumberGenerator>` methods without instantiating a dedicated object. This means that ``Random`` can be used via script with methods such as :ref:`@GDScript.randi<class_@GDScript_method_randi>`:

::

    Random.randomize() # Time-based.
    Random.seed = hash("Goost") # Manual.
    var i = Random.randi() % 100
    var f = Random.randf_range(-1.0, 1.0)

The class may implement other methods other than what :ref:`RandomNumberGenerator<class_RandomNumberGenerator>` already provides out of the box.

It's not possible to instantiate a new ``Random`` instance with ``Random.new()`` in GDScript. If you'd like to instantiate a local instance of ``Random``, use :ref:`new_instance<class_Random_method_new_instance>` instead, or ``ClassDB.instance("Random")``, see :ref:`ClassDB.instance<class_ClassDB_method_instance>`.

Methods
-------

+-----------------------------+---------------------------------------------------------------------------+
| :ref:`Random<class_Random>` | :ref:`new_instance<class_Random_method_new_instance>` **(** **)** |const| |
+-----------------------------+---------------------------------------------------------------------------+

Method Descriptions
-------------------

.. _class_Random_method_new_instance:

- :ref:`Random<class_Random>` **new_instance** **(** **)** |const|

Instantiates a new local ``Random`` instance based on :ref:`RandomNumberGenerator<class_RandomNumberGenerator>`. Does not override the ``Random`` instance accessible at :ref:`@GlobalScope<class_@GlobalScope>`.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
