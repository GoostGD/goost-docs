:github_url: hide

.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the PolyNode2D.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_PolyNode2D:

PolyNode2D
==========

**Inherits:** :ref:`Reference<class_Reference>` **<** :ref:`Object<class_Object>`

Represents a single polygon node in the hierarchy of nested polygons.

Description
-----------

A data structure which is used to receive solutions from clipping and offsetting operations. It's an alternative to the array-based data structures which also receive these solutions in :ref:`PolyBoolean2D<class_PolyBoolean2D>`. The class has a major advantage over the :ref:`Array<class_Array>` structure by having an ability to properly represent the parent-child relationships of the returned polygons. However, since this is a more complex structure, and since it's more computationally expensive to process, it should only be used when parent-child polygon relationships are needed.

Properties
----------

+-------------------------------------------------+---------------------------------------------+--------------------------+
| :ref:`PoolVector2Array<class_PoolVector2Array>` | :ref:`path<class_PolyNode2D_property_path>` | ``PoolVector2Array(  )`` |
+-------------------------------------------------+---------------------------------------------+--------------------------+

Methods
-------

+-------------------------------------+----------------------------------------------------------------------------------------------------------------------+
| void                                | :ref:`clear<class_PolyNode2D_method_clear>` **(** **)**                                                              |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------------+
| :ref:`PolyNode2D<class_PolyNode2D>` | :ref:`get_child<class_PolyNode2D_method_get_child>` **(** :ref:`int<class_int>` index **)**                          |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`               | :ref:`get_child_count<class_PolyNode2D_method_get_child_count>` **(** **)** |const|                                  |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_Array>`           | :ref:`get_children<class_PolyNode2D_method_get_children>` **(** **)** |const|                                        |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------------+
| :ref:`PolyNode2D<class_PolyNode2D>` | :ref:`get_parent<class_PolyNode2D_method_get_parent>` **(** **)** |const|                                            |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`             | :ref:`is_hole<class_PolyNode2D_method_is_hole>` **(** **)** |const|                                                  |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------------+
| :ref:`PolyNode2D<class_PolyNode2D>` | :ref:`new_child<class_PolyNode2D_method_new_child>` **(** :ref:`PoolVector2Array<class_PoolVector2Array>` path **)** |
+-------------------------------------+----------------------------------------------------------------------------------------------------------------------+

Property Descriptions
---------------------

.. _class_PolyNode2D_property_path:

- :ref:`PoolVector2Array<class_PoolVector2Array>` **path**

+-----------+--------------------------+
| *Default* | ``PoolVector2Array(  )`` |
+-----------+--------------------------+
| *Setter*  | set_path(value)          |
+-----------+--------------------------+
| *Getter*  | get_path()               |
+-----------+--------------------------+

The contour representing the node. The top level root node has no contour, so this logic can be used to distinguish between the nodes and the tree itself containing them all.

Method Descriptions
-------------------

.. _class_PolyNode2D_method_clear:

- void **clear** **(** **)**

Removes all ``PolyNode2D`` children.

----

.. _class_PolyNode2D_method_get_child:

- :ref:`PolyNode2D<class_PolyNode2D>` **get_child** **(** :ref:`int<class_int>` index **)**

Returns a child node by its index (see :ref:`get_child_count<class_PolyNode2D_method_get_child_count>`). This method can be used for iterating all children of a node.

----

.. _class_PolyNode2D_method_get_child_count:

- :ref:`int<class_int>` **get_child_count** **(** **)** |const|

Returns the number of child nodes.

----

.. _class_PolyNode2D_method_get_children:

- :ref:`Array<class_Array>` **get_children** **(** **)** |const|

Returns an array of references to node's children.

----

.. _class_PolyNode2D_method_get_parent:

- :ref:`PolyNode2D<class_PolyNode2D>` **get_parent** **(** **)** |const|

Returns the parent node of the current node, or an empty ``PolyNode2D`` if the node lacks a parent.

----

.. _class_PolyNode2D_method_is_hole:

- :ref:`bool<class_bool>` **is_hole** **(** **)** |const|

Tells whether the ``PolyNode2D``'s polygon is a hole.

Children of outer polygons are always holes, and children of holes are always (nested) outer polygons.

----

.. _class_PolyNode2D_method_new_child:

- :ref:`PolyNode2D<class_PolyNode2D>` **new_child** **(** :ref:`PoolVector2Array<class_PoolVector2Array>` path **)**

Constructs a new ``PolyNode2D`` using the ``path`` polygon vertices.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
